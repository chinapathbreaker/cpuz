#pragma once

#include <Windows.h>

// Ignore Macro redefinition warnings
#pragma warning(push)
#pragma warning(disable:4005)
#include <ntstatus.h>
#pragma warning(pop)

#define PAGE_SIZE   4096

#ifdef _X86_

#define PTI_SHIFT 12
#define PDI_SHIFT 22

#define PTE_MASK  0x3FF

#define PTE_OFFSET(Va)  ((Va >> PTI_SHIFT) & PTE_MASK)
#define PDE_OFFSET(Va)  ((Va >> PDI_SHIFT) & PTE_MASK)

typedef struct _HARDWARE_PTE {
    ULONG Valid : 1;
    ULONG Write : 1;
    ULONG Owner : 1;
    ULONG WriteThrough : 1;
    ULONG CacheDisable : 1;
    ULONG Accessed : 1;
    ULONG Dirty : 1;
    ULONG LargePage : 1;
    ULONG Global : 1;
    ULONG CopyOnWrite : 1;          // software field
    ULONG Prototype : 1;            // software field
    ULONG reserved0 : 1;            // software field
    ULONG PageFrameNumber : 20;
} HARDWARE_PTE, *PHARDWARE_PTE;

#else   // _AMD64_

#define PTI_SHIFT 12
#define PDI_SHIFT 21
#define PPI_SHIFT 30
#define PXI_SHIFT 39

#define PTE_MASK  0x1FF

#define PTE_OFFSET(Va)  ((Va >> PTI_SHIFT) & PTE_MASK)
#define PDE_OFFSET(Va)  ((Va >> PDI_SHIFT) & PTE_MASK)
#define PPE_OFFSET(Va)  ((Va >> PPI_SHIFT) & PTE_MASK)
#define PXE_OFFSET(Va)  ((Va >> PXI_SHIFT) & PTE_MASK)

#define _HARDWARE_PTE_WORKING_SET_BITS  11
typedef struct _HARDWARE_PTE {
    ULONG64 Valid : 1;
    ULONG64 Write : 1;
    ULONG64 Owner : 1;
    ULONG64 WriteThrough : 1;
    ULONG64 CacheDisable : 1;
    ULONG64 Accessed : 1;
    ULONG64 Dirty : 1;
    ULONG64 LargePage : 1;
    ULONG64 Global : 1;
    ULONG64 CopyOnWrite : 1;          // software field
    ULONG64 Prototype : 1;            // software field
    ULONG64 reserved0 : 1;            // software field
    ULONG64 PageFrameNumber : 28;
    ULONG64 reserved1 : 24 - (_HARDWARE_PTE_WORKING_SET_BITS + 1);
    ULONG64 SoftwareWsIndex : _HARDWARE_PTE_WORKING_SET_BITS;
    ULONG64 NoExecute : 1;
} HARDWARE_PTE, *PHARDWARE_PTE;

#endif

#define OBJ_KERNEL_HANDLE       0x00000200L
typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    HANDLE RootDirectory;
    PVOID ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;        // Points to type SECURITY_DESCRIPTOR
    PVOID SecurityQualityOfService;  // Points to type SECURITY_QUALITY_OF_SERVICE
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

#define InitializeObjectAttributes( p, n, a, r, s ) { \
    (p)->Length = sizeof( OBJECT_ATTRIBUTES );          \
    (p)->RootDirectory = r;                             \
    (p)->Attributes = a;                                \
    (p)->ObjectName = n;                                \
    (p)->SecurityDescriptor = s;                        \
    (p)->SecurityQualityOfService = NULL;               \
    }

typedef struct _CLIENT_ID {
    HANDLE UniqueProcess;
    HANDLE  UniqueThread;
} CLIENT_ID, *PCLIENT_ID;

typedef NTSTATUS(WINAPI *NtQueryIntervalProfile_t)(
    __in ULONG Value,
    __in PVOID Unknown);

typedef NTSTATUS(WINAPI *NtQuerySystemInformation_t)(
    __in ULONG SystemInformationClass,
    __inout PVOID SystemInformation,
    __in ULONG SystemInformationLength,
    __out_opt PULONG ReturnLength);

typedef NTSTATUS(NTAPI *ZwOpenProcess_t)(
    __out PHANDLE ProcessHandle,
    __in ACCESS_MASK DesiredAccess,
    __in POBJECT_ATTRIBUTES ObjectAttributes,
    __in_opt PCLIENT_ID ClientId);

typedef NTSTATUS(NTAPI *ZwOpenProcessTokenEx_t)(
    __in HANDLE ProcessHandle,
    __in ACCESS_MASK DesiredAccess,
    __in ULONG HandleAttributes,
    __out PHANDLE TokenHandle);

typedef NTSTATUS(NTAPI *ZwDuplicateToken_t)(
    __in HANDLE ExistingTokenHandle,
    __in ACCESS_MASK DesiredAccess,
    __in POBJECT_ATTRIBUTES ObjectAttributes,
    __in BOOLEAN EffectiveOnly,
    __in TOKEN_TYPE TokenType,
    __out PHANDLE NewTokenHandle);

typedef NTSTATUS(NTAPI *ZwSetInformationProcess_t)(
    __in HANDLE ProcessHandle,
    __in ULONG ProcessInformationClass,
    __in PVOID ProcessInformation,
    __in ULONG ProcessInformationLength);

#define ProcessAccessToken 9
typedef struct _PROCESS_ACCESS_TOKEN {
    HANDLE Token;
    HANDLE Thread;
} PROCESS_ACCESS_TOKEN, *PPROCESS_ACCESS_TOKEN;

#define SystemModuleInformation 11
typedef struct _SYSTEM_MODULE_INFORMATION {
    ULONG_PTR Reserved[2];
    PVOID Base;
    ULONG Size;
    ULONG Flags;
    USHORT Index;
    USHORT Unknown;
    USHORT LoadCount;
    USHORT ModuleNameOffset;
    CHAR ImageName[256];
} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;

typedef struct _SYSTEM_MODULES {
    ULONG Count;
    SYSTEM_MODULE_INFORMATION Modules[1];
} SYSTEM_MODULE, *PSYSTEM_MODULES;
